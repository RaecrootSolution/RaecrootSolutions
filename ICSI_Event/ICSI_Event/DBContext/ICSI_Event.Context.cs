//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ICSI_Event.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ICSI_EventsEntities : DbContext
    {
        public ICSI_EventsEntities()
            : base("name=ICSI_EventsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ACK_SEQ_T> ACK_SEQ_T { get; set; }
        public virtual DbSet<CITY_T> CITY_T { get; set; }
        public virtual DbSet<EVENT_REGISTRATION_T> EVENT_REGISTRATION_T { get; set; }
        public virtual DbSet<EVENT_T> EVENT_T { get; set; }
        public virtual DbSet<EVENT_USER_T> EVENT_USER_T { get; set; }
        public virtual DbSet<STALL_T> STALL_T { get; set; }
        public virtual DbSet<STALL_TRANSACTION_T> STALL_TRANSACTION_T { get; set; }
        public virtual DbSet<STATE_T> STATE_T { get; set; }
        public virtual DbSet<tblPaymentDetail> tblPaymentDetails { get; set; }
        public virtual DbSet<tblPaymentGatewayMaster> tblPaymentGatewayMasters { get; set; }
        public virtual DbSet<tblPaymentStatusMaster> tblPaymentStatusMasters { get; set; }
        public virtual DbSet<tblPayModeMaster> tblPayModeMasters { get; set; }
        public virtual DbSet<tblProcessMaster> tblProcessMasters { get; set; }
        public virtual DbSet<EVENT_TYPE_T> EVENT_TYPE_T { get; set; }
    
        public virtual ObjectResult<USPGetPGSourceData_Result> USPGetPGSourceData(string pGType)
        {
            var pGTypeParameter = pGType != null ?
                new ObjectParameter("PGType", pGType) :
                new ObjectParameter("PGType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPGetPGSourceData_Result>("USPGetPGSourceData", pGTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USPInsertPayment(string route, Nullable<int> processRequestID, Nullable<int> paymentStatusID, Nullable<int> payModeID, Nullable<decimal> totAmt, Nullable<decimal> totalTax, string pGCode)
        {
            var routeParameter = route != null ?
                new ObjectParameter("Route", route) :
                new ObjectParameter("Route", typeof(string));
    
            var processRequestIDParameter = processRequestID.HasValue ?
                new ObjectParameter("ProcessRequestID", processRequestID) :
                new ObjectParameter("ProcessRequestID", typeof(int));
    
            var paymentStatusIDParameter = paymentStatusID.HasValue ?
                new ObjectParameter("PaymentStatusID", paymentStatusID) :
                new ObjectParameter("PaymentStatusID", typeof(int));
    
            var payModeIDParameter = payModeID.HasValue ?
                new ObjectParameter("PayModeID", payModeID) :
                new ObjectParameter("PayModeID", typeof(int));
    
            var totAmtParameter = totAmt.HasValue ?
                new ObjectParameter("TotAmt", totAmt) :
                new ObjectParameter("TotAmt", typeof(decimal));
    
            var totalTaxParameter = totalTax.HasValue ?
                new ObjectParameter("TotalTax", totalTax) :
                new ObjectParameter("TotalTax", typeof(decimal));
    
            var pGCodeParameter = pGCode != null ?
                new ObjectParameter("PGCode", pGCode) :
                new ObjectParameter("PGCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USPInsertPayment", routeParameter, processRequestIDParameter, paymentStatusIDParameter, payModeIDParameter, totAmtParameter, totalTaxParameter, pGCodeParameter);
        }
    
        public virtual ObjectResult<USPUpdatePayment_Result> USPUpdatePayment(Nullable<int> requestId, string responseCode, string responseTxnId, Nullable<System.DateTime> responseTxnDt, string responseData, Nullable<int> paymentStatusID, string payMode, Nullable<decimal> sT, Nullable<decimal> procFee, Nullable<decimal> totAmt)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var responseCodeParameter = responseCode != null ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(string));
    
            var responseTxnIdParameter = responseTxnId != null ?
                new ObjectParameter("ResponseTxnId", responseTxnId) :
                new ObjectParameter("ResponseTxnId", typeof(string));
    
            var responseTxnDtParameter = responseTxnDt.HasValue ?
                new ObjectParameter("ResponseTxnDt", responseTxnDt) :
                new ObjectParameter("ResponseTxnDt", typeof(System.DateTime));
    
            var responseDataParameter = responseData != null ?
                new ObjectParameter("ResponseData", responseData) :
                new ObjectParameter("ResponseData", typeof(string));
    
            var paymentStatusIDParameter = paymentStatusID.HasValue ?
                new ObjectParameter("PaymentStatusID", paymentStatusID) :
                new ObjectParameter("PaymentStatusID", typeof(int));
    
            var payModeParameter = payMode != null ?
                new ObjectParameter("PayMode", payMode) :
                new ObjectParameter("PayMode", typeof(string));
    
            var sTParameter = sT.HasValue ?
                new ObjectParameter("ST", sT) :
                new ObjectParameter("ST", typeof(decimal));
    
            var procFeeParameter = procFee.HasValue ?
                new ObjectParameter("ProcFee", procFee) :
                new ObjectParameter("ProcFee", typeof(decimal));
    
            var totAmtParameter = totAmt.HasValue ?
                new ObjectParameter("TotAmt", totAmt) :
                new ObjectParameter("TotAmt", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPUpdatePayment_Result>("USPUpdatePayment", requestIdParameter, responseCodeParameter, responseTxnIdParameter, responseTxnDtParameter, responseDataParameter, paymentStatusIDParameter, payModeParameter, sTParameter, procFeeParameter, totAmtParameter);
        }
    }
}
